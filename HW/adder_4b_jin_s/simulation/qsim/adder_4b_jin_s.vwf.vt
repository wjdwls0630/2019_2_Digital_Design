// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/05/2019 00:45:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          adder_4b_jin_s
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder_4b_jin_s_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg c_in;
// wires                                               
wire c_out;
wire [3:0] s;

// assign statements (if any)                          
adder_4b_jin_s i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c_in(c_in),
	.c_out(c_out),
	.s(s)
);
initial 
begin 
#25600000 $finish;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 

// c_in
always
begin
	c_in = 1'b0;
	c_in = #12800000 1'b1;
	#12800000;
end 
endmodule

